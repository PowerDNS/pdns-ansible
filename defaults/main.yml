---

# By default, no PowerDNS repository will be configured by the role
pdns_install_repo: ""

# To install PowerDNS from the 'master' official repository
# use the following playbook snippet
# - hosts: all
#   roles:
#    - { role: PowerDNS.pdns,
#        pdns_install_repo: "{{ pdns_auth_powerdns_repo_master }}"
#
# To install PowerDNS from the '4.0.x' official repository
# use the following playbook snippet
# - hosts: all
#   roles:
#    - { role: PowerDNS.pdns,
#        pdns_install_repo: "{{ pdns_auth_powerdns_repo_40 }}"
#
# To install PowerDNS from the '4.1.x' official repository
# use the following playbook snippet
# - hosts: all
#   roles:
#    - { role: PowerDNS.pdns,
#        pdns_install_repo: "{{ pdns_auth_powerdns_repo_41 }}"
#
# To make this role configure a custom repository and install
# PowerDNS from it override the `pdns_install_repo` variable
# as follows
# - hosts: all
#   vars:
#     pdns_install_repo:
#       apt_repo_origin: "my.repo.com"  # Pin the PowerDNS packages to the provided repository origin
#       apt_repo: "deb http://my.repo.com/{{ ansible_distribution | lower }} {{ ansible_distribution_release | lower }}/pdns main"
#       gpg_key: "http://my.repo.com/MYREPOGPGPUBKEY.asc" # repository public GPG key
#       gpg_key_id: "MYREPOGPGPUBKEYID" # to avoid to reimport the key each time the role is executed
#       yum_repo_baseurl: "http://my.repo.com/centos/$basearch/$releasever/pdns"
#       name: "powerdns"       # the name of the repository
#   roles:
#    - { role: PowerDNS.pdns }

# Install the EPEL repository.
# EPEL is needed to satisfy some PowerDNS dependencies like protobuf
pdns_install_epel: True

# The name of the PowerDNS package
pdns_package_name: "{{ default_pdns_package_name }}"

# Install a specific version of the PowerDNS package
# NB: The usage of this variable makes only sense on RedHat-like systems,
#     where each YUM repository can contains multiple versions of the same package.
pdns_package_version: ""

# The user and group the PowerDNS process will run as.
# NOTE: at the moment, we don't create a user as we assume the package creates
# a "pdns" user and group. If you change these variables, make sure to create
# the user and groups before applying this role
pdns_user: pdns
pdns_group: pdns

# Name of the PowerDNS Service
pdns_service_name: "pdns"

# Force the execution of the handlers at the end of the role.
# This is required if using this role to configure multiple pdns auth instance in the same single play.
# See PowerDNS virtual hosting https://doc.powerdns.com/md/authoritative/running/#starting-virtual-instances-with-system.
pdns_flush_handlers: False

# PowerDNS configuration file and directory
pdns_config_dir: "{{ default_pdns_config_dir }}"
pdns_config_file: "pdns.conf"

# Dictionary of packages that should be installed to enable the backends.
# backendname: packagename
pdns_backends_packages: "{{ default_pdns_backends_packages }}"

# pdns_config: A dict containing all configuration options, except for backend
# configuration and the "config-dir", "setuid" and "setgid" directives.
#
# Example:
# pdns_config:
#  master: yes
#  slave: no
#  local-address: '192.0.2.53'
#  local-ipv6: '2001:DB8:1::53'
#  local-port: '5300'
pdns_config: {}

# pdns_backends: A dict with all the backends you'd like to configure. You can use
# the multiple backends of the same kind by using {backend}:{instance_name}.
#
# For example:
# pdns_backends:
#   'gmysql:one':
#     'user': root
#     'host': 127.0.0.1
#     'password': root
#     'dbname': pdns
#   'gmysql:two':
#     'user': pdns_user
#     'host': 192.0.2.15
#     'password': my_password
#     'dbname': dns
#   'bind':
#     'config': '/etc/named/named.conf'
#     'hybrid':  yes
#     'dnssec-db': '{{ pdns_config_dir }}/dnssec.db'
#
# This default starts just the bind-backend with an empty config file
pdns_backends:
  bind:
    config: '/dev/null'

# Administrative credentials to create the PowerDNS MySQL backend database and user.
# For example:
# pdns_mysql_databases_credentials:
#   'gmysql:one':
#     'priv_user': root
#     'priv_password': my_first_password
#     'priv_host':
#       - "localhost"
#       - "%"
#   'gmysql:two':
#     'priv_user': someprivuser
#     'priv_password': my_second_password
#     'priv_host':
#       - "localhost"
pdns_mysql_databases_credentials: {}

# This will create the PowerDNS backend SQLite database
# in the given locations.
# NOTE: Requries the SQLite CLI tools to be available in the machine and the gsqlite3
# backend to be installed on the machine.
pdns_sqlite_databases_locations: []
